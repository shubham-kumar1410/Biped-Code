

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Nov 04 06:44:08 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	dabs	1,0x7E,2
    11  0000                     
    12                           ; Version 1.44
    13                           ; Generated 14/09/2017 GMT
    14                           ; 
    15                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F877A Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0030                     _RB0	set	48
   107  0086                     _TRISB	set	134
   108                           
   109                           ; #config settings
   110  0000                     
   111                           	psect	cinit
   112  07FC                     start_initialization:	
   113  07FC                     __initialization:	
   114  07FC                     end_of_initialization:	
   115                           ;End of C runtime variable initialization code
   116                           
   117  07FC                     __end_of__initialization:	
   118  07FC  0183               	clrf	3
   119  07FD  120A  118A  2FCF   	ljmp	_main	;jump to C main() function
   120                           
   121                           	psect	cstackCOMMON
   122  0070                     __pcstackCOMMON:	
   123  0070                     ?_servoRotate0:	
   124  0070                     ??_servoRotate0:	
   125                           ; 1 bytes @ 0x0
   126                           
   127  0070                     ?_servoRotate90:	
   128                           ; 1 bytes @ 0x0
   129                           
   130  0070                     ??_servoRotate90:	
   131                           ; 1 bytes @ 0x0
   132                           
   133  0070                     ?_servoRotate180:	
   134                           ; 1 bytes @ 0x0
   135                           
   136  0070                     ??_servoRotate180:	
   137                           ; 1 bytes @ 0x0
   138                           
   139  0070                     ?_main:	
   140                           ; 1 bytes @ 0x0
   141                           
   142                           
   143                           ; 1 bytes @ 0x0
   144  0070                     	ds	2
   145  0072                     servoRotate0@i:	
   146  0072                     servoRotate90@i:	
   147                           ; 2 bytes @ 0x2
   148                           
   149  0072                     servoRotate180@i:	
   150                           ; 2 bytes @ 0x2
   151                           
   152                           
   153                           ; 2 bytes @ 0x2
   154  0072                     	ds	2
   155  0074                     ??_main:	
   156                           
   157                           ; 1 bytes @ 0x4
   158  0074                     	ds	3
   159                           
   160                           	psect	maintext
   161  07CF                     __pmaintext:	
   162 ;;
   163 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   164 ;;
   165 ;; *************** function _main *****************
   166 ;; Defined at:
   167 ;;		line 58 in file "motor_control.c"
   168 ;; Parameters:    Size  Location     Type
   169 ;;		None
   170 ;; Auto vars:     Size  Location     Type
   171 ;;		None
   172 ;; Return value:  Size  Location     Type
   173 ;;                  1    wreg      void 
   174 ;; Registers used:
   175 ;;		wreg, status,2, status,0, pclath, cstack
   176 ;; Tracked objects:
   177 ;;		On entry : B00/0
   178 ;;		On exit  : 0/0
   179 ;;		Unchanged: 0/0
   180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   181 ;;      Params:         0       0       0       0       0
   182 ;;      Locals:         0       0       0       0       0
   183 ;;      Temps:          3       0       0       0       0
   184 ;;      Totals:         3       0       0       0       0
   185 ;;Total ram usage:        3 bytes
   186 ;; Hardware stack levels required when called:    1
   187 ;; This function calls:
   188 ;;		_servoRotate0
   189 ;;		_servoRotate180
   190 ;;		_servoRotate90
   191 ;; This function is called by:
   192 ;;		Startup code after reset
   193 ;; This function uses a non-reentrant model
   194 ;;
   195                           
   196                           
   197                           ;psect for function _main
   198  07CF                     _main:	
   199                           
   200                           ;motor_control.c: 60: TRISB = 0;
   201                           
   202                           ;incstack = 0
   203                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   204  07CF  1683               	bsf	3,5	;RP0=1, select bank1
   205  07D0  1303               	bcf	3,6	;RP1=0, select bank1
   206  07D1  0186               	clrf	6	;volatile
   207  07D2                     l520:	
   208                           ;motor_control.c: 61: do
   209                           
   210                           
   211                           ;motor_control.c: 62: {
   212                           ;motor_control.c: 63: servoRotate0();
   213  07D2  120A  118A  2758  120A  118A  	fcall	_servoRotate0
   214                           
   215                           ;motor_control.c: 64: _delay((unsigned long)((2000)*(8000000/4000.0)));
   216  07D7  3015               	movlw	21
   217  07D8  00F6               	movwf	??_main+2
   218  07D9  304B               	movlw	75
   219  07DA  00F5               	movwf	??_main+1
   220  07DB  30BE               	movlw	190
   221  07DC  00F4               	movwf	??_main
   222  07DD                     u77:	
   223  07DD  0BF4               	decfsz	??_main,f
   224  07DE  2FDD               	goto	u77
   225  07DF  0BF5               	decfsz	??_main+1,f
   226  07E0  2FDD               	goto	u77
   227  07E1  0BF6               	decfsz	??_main+2,f
   228  07E2  2FDD               	goto	u77
   229  07E3  0000               	nop
   230                           
   231                           ;motor_control.c: 65: servoRotate90();
   232  07E4  120A  118A  27A7  120A  118A  	fcall	_servoRotate90
   233                           
   234                           ;motor_control.c: 66: _delay((unsigned long)((2000)*(8000000/4000.0)));
   235  07E9  3015               	movlw	21
   236  07EA  00F6               	movwf	??_main+2
   237  07EB  304B               	movlw	75
   238  07EC  00F5               	movwf	??_main+1
   239  07ED  30BE               	movlw	190
   240  07EE  00F4               	movwf	??_main
   241  07EF                     u87:	
   242  07EF  0BF4               	decfsz	??_main,f
   243  07F0  2FEF               	goto	u87
   244  07F1  0BF5               	decfsz	??_main+1,f
   245  07F2  2FEF               	goto	u87
   246  07F3  0BF6               	decfsz	??_main+2,f
   247  07F4  2FEF               	goto	u87
   248  07F5  0000               	nop
   249                           
   250                           ;motor_control.c: 67: servoRotate180();
   251  07F6  120A  118A  277F  120A  118A  	fcall	_servoRotate180
   252                           
   253                           ;motor_control.c: 68: }while(1);
   254  07FB  2FD2               	goto	l520
   255  07FC                     __end_of_main:	
   256                           
   257                           	psect	text1
   258  07A7                     __ptext1:	
   259 ;; *************** function _servoRotate90 *****************
   260 ;; Defined at:
   261 ;;		line 34 in file "motor_control.c"
   262 ;; Parameters:    Size  Location     Type
   263 ;;		None
   264 ;; Auto vars:     Size  Location     Type
   265 ;;  i               2    2[COMMON] unsigned int 
   266 ;; Return value:  Size  Location     Type
   267 ;;                  1    wreg      void 
   268 ;; Registers used:
   269 ;;		wreg, status,2
   270 ;; Tracked objects:
   271 ;;		On entry : 0/0
   272 ;;		On exit  : 0/0
   273 ;;		Unchanged: 0/0
   274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   275 ;;      Params:         0       0       0       0       0
   276 ;;      Locals:         2       0       0       0       0
   277 ;;      Temps:          2       0       0       0       0
   278 ;;      Totals:         4       0       0       0       0
   279 ;;Total ram usage:        4 bytes
   280 ;; Hardware stack levels used:    1
   281 ;; This function calls:
   282 ;;		Nothing
   283 ;; This function is called by:
   284 ;;		_main
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288                           
   289                           ;psect for function _servoRotate90
   290  07A7                     _servoRotate90:	
   291                           
   292                           ;motor_control.c: 36: unsigned int i;
   293                           ;motor_control.c: 37: for(i=0;i<50;i++)
   294                           
   295                           ;incstack = 0
   296                           ; Regs used in _servoRotate90: [wreg+status,2]
   297  07A7  01F2               	clrf	servoRotate90@i
   298  07A8  01F3               	clrf	servoRotate90@i+1
   299  07A9                     L1:	
   300  07A9  3000               	movlw	0
   301  07AA  0273               	subwf	servoRotate90@i+1,w
   302  07AB  3032               	movlw	50
   303  07AC  1903               	skipnz
   304  07AD  0272               	subwf	servoRotate90@i,w
   305  07AE  1803               	btfsc	3,0
   306  07AF  0008               	return
   307                           
   308                           ;motor_control.c: 38: {
   309                           ;motor_control.c: 39: RB0 = 1;
   310  07B0  1283               	bcf	3,5	;RP0=0, select bank0
   311  07B1  1303               	bcf	3,6	;RP1=0, select bank0
   312  07B2  1406               	bsf	6,0	;volatile
   313                           
   314                           ;motor_control.c: 40: _delay((unsigned long)((1500)*(8000000/4000000.0)));
   315  07B3  3004               	movlw	4
   316  07B4  00F1               	movwf	??_servoRotate90+1
   317  07B5  30E4               	movlw	228
   318  07B6  00F0               	movwf	??_servoRotate90
   319  07B7                     u97:	
   320  07B7  0BF0               	decfsz	??_servoRotate90,f
   321  07B8  2FB7               	goto	u97
   322  07B9  0BF1               	decfsz	??_servoRotate90+1,f
   323  07BA  2FB7               	goto	u97
   324  07BB  0000               	nop
   325                           
   326                           ;motor_control.c: 41: RB0 = 0;
   327  07BC  1283               	bcf	3,5	;RP0=0, select bank0
   328  07BD  1303               	bcf	3,6	;RP1=0, select bank0
   329  07BE  1006               	bcf	6,0	;volatile
   330                           
   331                           ;motor_control.c: 42: _delay((unsigned long)((18500)*(8000000/4000000.0)));
   332  07BF  3031               	movlw	49
   333  07C0  00F1               	movwf	??_servoRotate90+1
   334  07C1  300B               	movlw	11
   335  07C2  00F0               	movwf	??_servoRotate90
   336  07C3                     u107:	
   337  07C3  0BF0               	decfsz	??_servoRotate90,f
   338  07C4  2FC3               	goto	u107
   339  07C5  0BF1               	decfsz	??_servoRotate90+1,f
   340  07C6  2FC3               	goto	u107
   341  07C7  2FC8               	nop2
   342  07C8  3001               	movlw	1
   343  07C9  07F2               	addwf	servoRotate90@i,f
   344  07CA  1803               	skipnc
   345  07CB  0AF3               	incf	servoRotate90@i+1,f
   346  07CC  3000               	movlw	0
   347  07CD  07F3               	addwf	servoRotate90@i+1,f
   348  07CE  2FA9               	goto	L1
   349  07CF                     __end_of_servoRotate90:	
   350                           
   351                           	psect	text2
   352  077F                     __ptext2:	
   353 ;; *************** function _servoRotate180 *****************
   354 ;; Defined at:
   355 ;;		line 46 in file "motor_control.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  i               2    2[COMMON] unsigned int 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, status,2
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   369 ;;      Params:         0       0       0       0       0
   370 ;;      Locals:         2       0       0       0       0
   371 ;;      Temps:          2       0       0       0       0
   372 ;;      Totals:         4       0       0       0       0
   373 ;;Total ram usage:        4 bytes
   374 ;; Hardware stack levels used:    1
   375 ;; This function calls:
   376 ;;		Nothing
   377 ;; This function is called by:
   378 ;;		_main
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           
   383                           ;psect for function _servoRotate180
   384  077F                     _servoRotate180:	
   385                           
   386                           ;motor_control.c: 48: unsigned int i;
   387                           ;motor_control.c: 49: for(i=0;i<50;i++)
   388                           
   389                           ;incstack = 0
   390                           ; Regs used in _servoRotate180: [wreg+status,2]
   391  077F  01F2               	clrf	servoRotate180@i
   392  0780  01F3               	clrf	servoRotate180@i+1
   393  0781                     L2:	
   394  0781  3000               	movlw	0
   395  0782  0273               	subwf	servoRotate180@i+1,w
   396  0783  3032               	movlw	50
   397  0784  1903               	skipnz
   398  0785  0272               	subwf	servoRotate180@i,w
   399  0786  1803               	btfsc	3,0
   400  0787  0008               	return
   401                           
   402                           ;motor_control.c: 50: {
   403                           ;motor_control.c: 51: RB0 = 1;
   404  0788  1283               	bcf	3,5	;RP0=0, select bank0
   405  0789  1303               	bcf	3,6	;RP1=0, select bank0
   406  078A  1406               	bsf	6,0	;volatile
   407                           
   408                           ;motor_control.c: 52: _delay((unsigned long)((2200)*(8000000/4000000.0)));
   409  078B  3006               	movlw	6
   410  078C  00F1               	movwf	??_servoRotate180+1
   411  078D  30B5               	movlw	181
   412  078E  00F0               	movwf	??_servoRotate180
   413  078F                     u117:	
   414  078F  0BF0               	decfsz	??_servoRotate180,f
   415  0790  2F8F               	goto	u117
   416  0791  0BF1               	decfsz	??_servoRotate180+1,f
   417  0792  2F8F               	goto	u117
   418  0793  2F94               	nop2
   419                           
   420                           ;motor_control.c: 53: RB0 = 0;
   421  0794  1283               	bcf	3,5	;RP0=0, select bank0
   422  0795  1303               	bcf	3,6	;RP1=0, select bank0
   423  0796  1006               	bcf	6,0	;volatile
   424                           
   425                           ;motor_control.c: 54: _delay((unsigned long)((17800)*(8000000/4000000.0)));
   426  0797  302F               	movlw	47
   427  0798  00F1               	movwf	??_servoRotate180+1
   428  0799  303A               	movlw	58
   429  079A  00F0               	movwf	??_servoRotate180
   430  079B                     u127:	
   431  079B  0BF0               	decfsz	??_servoRotate180,f
   432  079C  2F9B               	goto	u127
   433  079D  0BF1               	decfsz	??_servoRotate180+1,f
   434  079E  2F9B               	goto	u127
   435  079F  0000               	nop
   436  07A0  3001               	movlw	1
   437  07A1  07F2               	addwf	servoRotate180@i,f
   438  07A2  1803               	skipnc
   439  07A3  0AF3               	incf	servoRotate180@i+1,f
   440  07A4  3000               	movlw	0
   441  07A5  07F3               	addwf	servoRotate180@i+1,f
   442  07A6  2F81               	goto	L2
   443  07A7                     __end_of_servoRotate180:	
   444                           
   445                           	psect	text3
   446  0758                     __ptext3:	
   447 ;; *************** function _servoRotate0 *****************
   448 ;; Defined at:
   449 ;;		line 22 in file "motor_control.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  i               2    2[COMMON] unsigned int 
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      void 
   456 ;; Registers used:
   457 ;;		wreg, status,2
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         0       0       0       0       0
   464 ;;      Locals:         2       0       0       0       0
   465 ;;      Temps:          2       0       0       0       0
   466 ;;      Totals:         4       0       0       0       0
   467 ;;Total ram usage:        4 bytes
   468 ;; Hardware stack levels used:    1
   469 ;; This function calls:
   470 ;;		Nothing
   471 ;; This function is called by:
   472 ;;		_main
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476                           
   477                           ;psect for function _servoRotate0
   478  0758                     _servoRotate0:	
   479                           
   480                           ;motor_control.c: 24: unsigned int i;
   481                           ;motor_control.c: 25: for(i=0;i<50;i++)
   482                           
   483                           ;incstack = 0
   484                           ; Regs used in _servoRotate0: [wreg+status,2]
   485  0758  01F2               	clrf	servoRotate0@i
   486  0759  01F3               	clrf	servoRotate0@i+1
   487  075A                     L3:	
   488  075A  3000               	movlw	0
   489  075B  0273               	subwf	servoRotate0@i+1,w
   490  075C  3032               	movlw	50
   491  075D  1903               	skipnz
   492  075E  0272               	subwf	servoRotate0@i,w
   493  075F  1803               	btfsc	3,0
   494  0760  0008               	return
   495                           
   496                           ;motor_control.c: 26: {
   497                           ;motor_control.c: 27: RB0 = 1;
   498  0761  1283               	bcf	3,5	;RP0=0, select bank0
   499  0762  1303               	bcf	3,6	;RP1=0, select bank0
   500  0763  1406               	bsf	6,0	;volatile
   501                           
   502                           ;motor_control.c: 28: _delay((unsigned long)((800)*(8000000/4000000.0)));
   503  0764  30E4               	movlw	228
   504  0765  00F0               	movwf	??_servoRotate0
   505  0766                     u137:	
   506  0766  2F67               	nop2
   507  0767  2F68               	nop2
   508  0768  0BF0               	decfsz	??_servoRotate0,f
   509  0769  2F66               	goto	u137
   510  076A  2F6B               	nop2
   511  076B  0000               	nop
   512                           
   513                           ;motor_control.c: 29: RB0 = 0;
   514  076C  1283               	bcf	3,5	;RP0=0, select bank0
   515  076D  1303               	bcf	3,6	;RP1=0, select bank0
   516  076E  1006               	bcf	6,0	;volatile
   517                           
   518                           ;motor_control.c: 30: _delay((unsigned long)((19200)*(8000000/4000000.0)));
   519  076F  3032               	movlw	50
   520  0770  00F1               	movwf	??_servoRotate0+1
   521  0771  30DD               	movlw	221
   522  0772  00F0               	movwf	??_servoRotate0
   523  0773                     u147:	
   524  0773  0BF0               	decfsz	??_servoRotate0,f
   525  0774  2F73               	goto	u147
   526  0775  0BF1               	decfsz	??_servoRotate0+1,f
   527  0776  2F73               	goto	u147
   528  0777  2F78               	nop2
   529  0778  3001               	movlw	1
   530  0779  07F2               	addwf	servoRotate0@i,f
   531  077A  1803               	skipnc
   532  077B  0AF3               	incf	servoRotate0@i+1,f
   533  077C  3000               	movlw	0
   534  077D  07F3               	addwf	servoRotate0@i+1,f
   535  077E  2F5A               	goto	L3
   536  077F                     __end_of_servoRotate0:	
   537  007E                     btemp	set	126	;btemp
   538  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_servoRotate0
    _main->_servoRotate180
    _main->_servoRotate90

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      90
                                              4 COMMON     3     3      0
                       _servoRotate0
                     _servoRotate180
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (1) _servoRotate90                                        4     4      0      30
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate180                                       4     4      0      30
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate0                                         4     4      0      30
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _servoRotate0
   _servoRotate180
   _servoRotate90

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Nov 04 06:44:08 2017

            __CFG_CP$OFF 0000                       u77 07DD                       u87 07EF  
                     u97 07B7            servoRotate0@i 0072                      l520 07D2  
                    _RB0 0030                      u107 07C3                      u117 078F  
                    u127 079B                      u137 0766                      u147 0773  
           __CFG_CPD$OFF 0000             __CFG_FOSC$HS 0000           servoRotate90@i 0072  
           __CFG_LVP$OFF 0000             __CFG_WRT$OFF 0000                     _main 07CF  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0000  
        ??_servoRotate90 0070          servoRotate180@i 0072                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _TRISB 0086                    status 0003  
                  wtemp0 007E         ??_servoRotate180 0070          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0074           __CFG_PWRTE$OFF 0000  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pmaintext 07CF  
  __end_of_servoRotate90 07CF                  __ptext1 07A7                  __ptext2 077F  
                __ptext3 0758     end_of_initialization 07FC            ?_servoRotate0 0070  
         ??_servoRotate0 0070  __size_of_servoRotate180 0028      start_initialization 07FC  
              ___latbits 0002     __end_of_servoRotate0 077F           _servoRotate180 077F  
 __size_of_servoRotate90 0028   __end_of_servoRotate180 07A7            __size_of_main 002D  
        ?_servoRotate180 0070            _servoRotate90 07A7    __size_of_servoRotate0 0027  
         ?_servoRotate90 0070             _servoRotate0 0758  
